// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220610123310_addDocumentLedgerIdInPayments")]
    partial class addDocumentLedgerIdInPayments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BankAccountType")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Branch")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClearingAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OpeningBalanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ChAccountId");

                    b.HasIndex("ClearingAccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Domain.Entities.BankReconciliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankStmtId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankStmtId");

                    b.HasIndex("PaymentId");

                    b.ToTable("BankReconciliations");
                });

            modelBuilder.Entity("Domain.Entities.BankStmtLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankReconStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.Property<DateTime>("StmtDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("BankStmtLines");
                });

            modelBuilder.Entity("Domain.Entities.BankStmtMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankStmtMaster");
                });

            modelBuilder.Entity("Domain.Entities.BillLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AnyOtherTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BillLines");
                });

            modelBuilder.Entity("Domain.Entities.BillMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OtherTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("BillMaster");
                });

            modelBuilder.Entity("Domain.Entities.BudgetLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MasterId");

                    b.ToTable("BudgetLines");
                });

            modelBuilder.Entity("Domain.Entities.BudgetMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BudgetName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BudgetMaster");
                });

            modelBuilder.Entity("Domain.Entities.BusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AccountPayableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountReceivableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BankAccountTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BusinessPartnerType")
                        .HasColumnType("int");

                    b.Property<string>("CNIC")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IncomeTaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SalesTaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountPayableId");

                    b.HasIndex("AccountReceivableId");

                    b.ToTable("BusinessPartners");
                });

            modelBuilder.Entity("Domain.Entities.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Domain.Entities.CashAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CashAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ChAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Handler")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OpeningBalanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ChAccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CashAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CostAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InventoryAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RevenueAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("RevenueAccountId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.CreditNoteLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("CreditNoteLines");
                });

            modelBuilder.Entity("Domain.Entities.CreditNoteMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DocumentLedgerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceivableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CreditNoteMaster");
                });

            modelBuilder.Entity("Domain.Entities.DebitNoteLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DebitNoteLines");
                });

            modelBuilder.Entity("Domain.Entities.DebitNoteMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DocumentLedgerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("DebitNoteMaster");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Designation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("CNIC")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CasualLeaves")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofJoining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofRetirment")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Domicile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DutyShift")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("EarnedLeaves")
                        .HasColumnType("int");

                    b.Property<string>("Faculty")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Maritalstatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NoOfIncrements")
                        .HasColumnType("int");

                    b.Property<string>("PlaceofBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Religion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Entities.EstimatedBudgetLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CalculationType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MasterId");

                    b.ToTable("EstimatedBudgetLines");
                });

            modelBuilder.Entity("Domain.Entities.EstimatedBudgetMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstimatedBudgetName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("EstimatedBudgetMaster");
                });

            modelBuilder.Entity("Domain.Entities.GRNLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GRNLines");
                });

            modelBuilder.Entity("Domain.Entities.GRNMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("GrnDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("GRNMaster");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceivableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.ToTable("InvoiceMaster");
                });

            modelBuilder.Entity("Domain.Entities.JournalEntryLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("JournalEntryLines");
                });

            modelBuilder.Entity("Domain.Entities.JournalEntryMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDebit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.ToTable("JournalEntryMaster");
                });

            modelBuilder.Entity("Domain.Entities.Level1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Level1");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Name = "Assets"
                        },
                        new
                        {
                            Id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Name = "Liability"
                        },
                        new
                        {
                            Id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Name = "Equity"
                        },
                        new
                        {
                            Id = new Guid("40000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Name = "Income"
                        },
                        new
                        {
                            Id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Name = "Expenses"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Level2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("Level1_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Level1_id");

                    b.ToTable("Level2");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Non - Current Assets"
                        },
                        new
                        {
                            Id = new Guid("12000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Current Assets"
                        },
                        new
                        {
                            Id = new Guid("21000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Non - Current Liabilities"
                        },
                        new
                        {
                            Id = new Guid("22000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Current Liabilities"
                        },
                        new
                        {
                            Id = new Guid("31000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Owner's Equity"
                        },
                        new
                        {
                            Id = new Guid("41000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("40000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Income"
                        },
                        new
                        {
                            Id = new Guid("51000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Cost of Revenue (COGS)"
                        },
                        new
                        {
                            Id = new Guid("52000000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "General & Administrative Expenses"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Level3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("Level2_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Level2_id");

                    b.ToTable("Level3");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("11000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Fixed Assets"
                        },
                        new
                        {
                            Id = new Guid("11200000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("11000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Intangible Assets"
                        },
                        new
                        {
                            Id = new Guid("11300000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("11000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Financial Assets"
                        },
                        new
                        {
                            Id = new Guid("11400000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("11000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Leased Assets"
                        },
                        new
                        {
                            Id = new Guid("12100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("12000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Cash & Cash Equivalents"
                        },
                        new
                        {
                            Id = new Guid("12200000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("12000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Accounts Receivable"
                        },
                        new
                        {
                            Id = new Guid("12300000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("12000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Prepayments, Advances, deposits"
                        },
                        new
                        {
                            Id = new Guid("12400000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("12000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Inventory / Merchandise"
                        },
                        new
                        {
                            Id = new Guid("21100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("21000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Long - term Borrowings"
                        },
                        new
                        {
                            Id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("22000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Accounts Payable"
                        },
                        new
                        {
                            Id = new Guid("22200000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("22000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Other Liability"
                        },
                        new
                        {
                            Id = new Guid("31100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("31000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Share Capital"
                        },
                        new
                        {
                            Id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("31000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Reserves"
                        },
                        new
                        {
                            Id = new Guid("41100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("41000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Operating Income"
                        },
                        new
                        {
                            Id = new Guid("41200000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("41000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Non - Operating Income"
                        },
                        new
                        {
                            Id = new Guid("41300000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("41000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Discount"
                        },
                        new
                        {
                            Id = new Guid("51100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("51000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Direct Cost"
                        },
                        new
                        {
                            Id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("52000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Administrative Expenses"
                        },
                        new
                        {
                            Id = new Guid("52200000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level2_id = new Guid("52000000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Selling, Promotions & Advertising"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Level4", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("Level1_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Level3_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Level1_id");

                    b.HasIndex("Level3_id");

                    b.ToTable("Level4");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Land"
                        },
                        new
                        {
                            Id = new Guid("11120000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Buildings"
                        },
                        new
                        {
                            Id = new Guid("11130000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = new Guid("11140000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Accumulated Depreciation - Buildings (Contra Asset)"
                        },
                        new
                        {
                            Id = new Guid("11410000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Leased Building"
                        },
                        new
                        {
                            Id = new Guid("11420000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Leased Equipment"
                        },
                        new
                        {
                            Id = new Guid("11430000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Accumulated Depreciation - Leased Building (Contra Asset)"
                        },
                        new
                        {
                            Id = new Guid("11440000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("11400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Accumulated Depreciation - Leased Equipment (Contra Asset)"
                        },
                        new
                        {
                            Id = new Guid("12110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Bank"
                        },
                        new
                        {
                            Id = new Guid("12120000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Cash"
                        },
                        new
                        {
                            Id = new Guid("12210000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Trade Receivable"
                        },
                        new
                        {
                            Id = new Guid("12220000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Other Receivable"
                        },
                        new
                        {
                            Id = new Guid("12310000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12300000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Sales Tax Asset"
                        },
                        new
                        {
                            Id = new Guid("12320000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12300000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Income Tax Asset"
                        },
                        new
                        {
                            Id = new Guid("12410000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Raw Material"
                        },
                        new
                        {
                            Id = new Guid("12420000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Work in Progress"
                        },
                        new
                        {
                            Id = new Guid("12430000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Finished Goods"
                        },
                        new
                        {
                            Id = new Guid("12440000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("10000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("12400000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Goods in Transition"
                        },
                        new
                        {
                            Id = new Guid("21110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("21100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Long - Term Loans"
                        },
                        new
                        {
                            Id = new Guid("21120000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("21100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Lease Liability"
                        },
                        new
                        {
                            Id = new Guid("22110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Bank Over draft"
                        },
                        new
                        {
                            Id = new Guid("22120000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Trade Accounts Payable"
                        },
                        new
                        {
                            Id = new Guid("22130000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Accrued Expenses, Loan & Other Payable"
                        },
                        new
                        {
                            Id = new Guid("22140000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Short Term Lease Payable"
                        },
                        new
                        {
                            Id = new Guid("22150000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Sales Tax Liability"
                        },
                        new
                        {
                            Id = new Guid("22160000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Income Tax Liability"
                        },
                        new
                        {
                            Id = new Guid("22210000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("20000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("22200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Unearned Revenue"
                        },
                        new
                        {
                            Id = new Guid("31110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Paid up Share Capital"
                        },
                        new
                        {
                            Id = new Guid("31210000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Share Premium"
                        },
                        new
                        {
                            Id = new Guid("31220000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Suplus /Defecit/ Retained Earnings"
                        },
                        new
                        {
                            Id = new Guid("31230000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Revaluation Reserve"
                        },
                        new
                        {
                            Id = new Guid("31240000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Exchange Differences"
                        },
                        new
                        {
                            Id = new Guid("31250000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Drawings"
                        },
                        new
                        {
                            Id = new Guid("31260000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("30000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("31200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Opening Balance equity"
                        },
                        new
                        {
                            Id = new Guid("41110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("40000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("41100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Revenue"
                        },
                        new
                        {
                            Id = new Guid("41210000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("40000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("41200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Interest Income"
                        },
                        new
                        {
                            Id = new Guid("41220000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("40000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("41200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Gain/Loss on Sale of Assets"
                        },
                        new
                        {
                            Id = new Guid("41310000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("40000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("41300000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Discount"
                        },
                        new
                        {
                            Id = new Guid("51110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("51100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Direct Labor / Salaries"
                        },
                        new
                        {
                            Id = new Guid("51120000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("51100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Direct Material"
                        },
                        new
                        {
                            Id = new Guid("51130000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("51100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Depreciation Expense"
                        },
                        new
                        {
                            Id = new Guid("51140000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("51100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Cost Of Goods Sold"
                        },
                        new
                        {
                            Id = new Guid("52110000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Salaries Expense"
                        },
                        new
                        {
                            Id = new Guid("52120000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Wages Expense"
                        },
                        new
                        {
                            Id = new Guid("52130000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Utilities Expense"
                        },
                        new
                        {
                            Id = new Guid("52140000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Entertainment / Meals Expense"
                        },
                        new
                        {
                            Id = new Guid("52150000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Printing & Stationary Expense"
                        },
                        new
                        {
                            Id = new Guid("52160000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Rent Expense"
                        },
                        new
                        {
                            Id = new Guid("52170000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Office Expense"
                        },
                        new
                        {
                            Id = new Guid("52180000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Repair & Maintenance Expense"
                        },
                        new
                        {
                            Id = new Guid("52190000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Transportation & Conveyance Expense"
                        },
                        new
                        {
                            Id = new Guid("52101000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Interest Expense"
                        },
                        new
                        {
                            Id = new Guid("52101100-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52100000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Tax Expense"
                        },
                        new
                        {
                            Id = new Guid("52210000-5566-7788-99aa-bbccddeeff00"),
                            IsDelete = false,
                            Level1_id = new Guid("50000000-5566-7788-99aa-bbccddeeff00"),
                            Level3_id = new Guid("52200000-5566-7788-99aa-bbccddeeff00"),
                            Name = "Advertising / Marketing Expense"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("FiscalYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSTRegistrationNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomeTaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LegalStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDelete = false,
                            Name = "SBBU"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BankReconStatus")
                        .HasColumnType("int");

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DocumentLedgerId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncomeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentFormType")
                        .HasColumnType("int");

                    b.Property<Guid>("PaymentRegisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentRegisterType")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<decimal>("SRBTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CampusId");

                    b.HasIndex("PaymentRegisterId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Entities.PayrollItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PayrollItemType")
                        .HasColumnType("int");

                    b.Property<int>("PayrollType")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PayrollItems");
                });

            modelBuilder.Entity("Domain.Entities.PayrollItemEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayrollItemId")
                        .HasColumnType("int");

                    b.Property<int>("PayrollType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollItemId");

                    b.ToTable("PayrollItemEmployees");
                });

            modelBuilder.Entity("Domain.Entities.PayrollTransactionLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayrollItemId")
                        .HasColumnType("int");

                    b.Property<int>("PayrollType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MasterId");

                    b.HasIndex("PayrollItemId");

                    b.ToTable("PayrollTransactionLines");
                });

            modelBuilder.Entity("Domain.Entities.PayrollTransactionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountPayableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BPSAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BPSName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("DocNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveDays")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PresentDays")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountPayableId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PayrollTransactionMaster");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("PurchaseOrderLines");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PODate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderMaster");
                });

            modelBuilder.Entity("Domain.Entities.RecordLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReconcilable")
                        .HasColumnType("bit");

                    b.Property<Guid>("Level4_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReconStatus")
                        .HasColumnType("int");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CampusId");

                    b.HasIndex("Level4_id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("RecordLedger");
                });

            modelBuilder.Entity("Domain.Entities.RequisitionLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MasterId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("RequisitionLines");
                });

            modelBuilder.Entity("Domain.Entities.RequisitionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CampusId");

                    b.HasIndex("StatusId");

                    b.ToTable("RequisitionMaster");
                });

            modelBuilder.Entity("Domain.Entities.TransactionReconcile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentLegderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentLedgerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentLegderId");

                    b.HasIndex("PaymentLedgerId");

                    b.ToTable("TransactionReconciles");
                });

            modelBuilder.Entity("Domain.Entities.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StoreManager")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Domain.Entities.WorkFlowMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WorkFlowMaster");
                });

            modelBuilder.Entity("Domain.Entities.WorkFlowStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkFlowStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDelete = false,
                            State = 0,
                            Status = "Draft",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDelete = false,
                            State = 1,
                            Status = "Rejected",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            IsDelete = false,
                            State = 2,
                            Status = "Unpaid",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDelete = false,
                            State = 3,
                            Status = "Partial Paid",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            IsDelete = false,
                            State = 4,
                            Status = "Paid",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            IsDelete = false,
                            State = 5,
                            Status = "Submitted",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            IsDelete = false,
                            State = 7,
                            Status = "Cancelled",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.WorkFlowTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("AllowedRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NextStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllowedRoleId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("MasterId");

                    b.HasIndex("NextStatusId");

                    b.ToTable("WorkFlowTransitions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "ChAccount")
                        .WithMany()
                        .HasForeignKey("ChAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "ClearingAccount")
                        .WithMany()
                        .HasForeignKey("ClearingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ChAccount");

                    b.Navigation("ClearingAccount");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.BankReconciliation", b =>
                {
                    b.HasOne("Domain.Entities.BankStmtLines", "BankStmt")
                        .WithMany()
                        .HasForeignKey("BankStmtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankStmt");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Entities.BankStmtLines", b =>
                {
                    b.HasOne("Domain.Entities.BankStmtMaster", "BankStmtMaster")
                        .WithMany("BankStmtLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankStmtMaster");
                });

            modelBuilder.Entity("Domain.Entities.BankStmtMaster", b =>
                {
                    b.HasOne("Domain.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Domain.Entities.BillLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.BillMaster", "BillMaster")
                        .WithMany("BillLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("BillMaster");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.BillMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "PayableAccount")
                        .WithMany()
                        .HasForeignKey("PayableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.BusinessPartner", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("PayableAccount");

                    b.Navigation("Status");

                    b.Navigation("Transactions");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Entities.BudgetLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BudgetMaster", "BudgetMaster")
                        .WithMany("BudgetLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BudgetMaster");
                });

            modelBuilder.Entity("Domain.Entities.BusinessPartner", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "AccountPayable")
                        .WithMany()
                        .HasForeignKey("AccountPayableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Level4", "AccountReceivable")
                        .WithMany()
                        .HasForeignKey("AccountReceivableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountPayable");

                    b.Navigation("AccountReceivable");
                });

            modelBuilder.Entity("Domain.Entities.Campus", b =>
                {
                    b.HasOne("Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Entities.CashAccount", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "ChAccount")
                        .WithMany()
                        .HasForeignKey("ChAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ChAccount");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "CostAccount")
                        .WithMany()
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "InventoryAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "RevenueAccount")
                        .WithMany()
                        .HasForeignKey("RevenueAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostAccount");

                    b.Navigation("InventoryAccount");

                    b.Navigation("RevenueAccount");
                });

            modelBuilder.Entity("Domain.Entities.CreditNoteLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.CreditNoteMaster", "CreditNoteMaster")
                        .WithMany("CreditNoteLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("CreditNoteMaster");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.CreditNoteMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusinessPartner", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "ReceivableAccount")
                        .WithMany()
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Campus");

                    b.Navigation("Customer");

                    b.Navigation("ReceivableAccount");

                    b.Navigation("Status");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.DebitNoteLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.DebitNoteMaster", "DebitNoteMaster")
                        .WithMany("DebitNoteLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("DebitNoteMaster");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.DebitNoteMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "PayableAccount")
                        .WithMany()
                        .HasForeignKey("PayableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.BusinessPartner", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("PayableAccount");

                    b.Navigation("Status");

                    b.Navigation("Transactions");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessPartner");

                    b.Navigation("Department");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("Domain.Entities.EstimatedBudgetLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EstimatedBudgetMaster", "EstimatedBudgetMaster")
                        .WithMany("EstimatedBudgetLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("EstimatedBudgetMaster");
                });

            modelBuilder.Entity("Domain.Entities.EstimatedBudgetMaster", b =>
                {
                    b.HasOne("Domain.Entities.BudgetMaster", "PreviousBudget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreviousBudget");
                });

            modelBuilder.Entity("Domain.Entities.GRNLines", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GRNMaster", "GRNMaster")
                        .WithMany("GRNLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GRNMaster");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.GRNMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseOrderMaster", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusinessPartner", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Status");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusinessPartner", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "ReceivableAccount")
                        .WithMany()
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Campus");

                    b.Navigation("Customer");

                    b.Navigation("ReceivableAccount");

                    b.Navigation("Status");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.JournalEntryLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.JournalEntryMaster", "JournalEntryMaster")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("BusinessPartner");

                    b.Navigation("JournalEntryMaster");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.JournalEntryMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Campus");

                    b.Navigation("Status");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Level2", b =>
                {
                    b.HasOne("Domain.Entities.Level1", "Level1")
                        .WithMany("Level2")
                        .HasForeignKey("Level1_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level1");
                });

            modelBuilder.Entity("Domain.Entities.Level3", b =>
                {
                    b.HasOne("Domain.Entities.Level2", "Level2")
                        .WithMany("Level3")
                        .HasForeignKey("Level2_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level2");
                });

            modelBuilder.Entity("Domain.Entities.Level4", b =>
                {
                    b.HasOne("Domain.Entities.Level1", "Level1")
                        .WithMany()
                        .HasForeignKey("Level1_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level3", "Level3")
                        .WithMany("Level4")
                        .HasForeignKey("Level3_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level1");

                    b.Navigation("Level3");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level4", "PaymentRegister")
                        .WithMany()
                        .HasForeignKey("PaymentRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("BusinessPartner");

                    b.Navigation("Campus");

                    b.Navigation("PaymentRegister");

                    b.Navigation("Status");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.PayrollItem", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.PayrollItemEmployee", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PayrollItem", "PayrollItem")
                        .WithMany()
                        .HasForeignKey("PayrollItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayrollItem");
                });

            modelBuilder.Entity("Domain.Entities.PayrollTransactionLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PayrollTransactionMaster", "PayrollTransactionMaster")
                        .WithMany("PayrollTransactionLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PayrollItem", "PayrollItem")
                        .WithMany()
                        .HasForeignKey("PayrollItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PayrollItem");

                    b.Navigation("PayrollTransactionMaster");
                });

            modelBuilder.Entity("Domain.Entities.PayrollTransactionMaster", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "AccountPayable")
                        .WithMany()
                        .HasForeignKey("AccountPayableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountPayable");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Employee");

                    b.Navigation("Status");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderLines", b =>
                {
                    b.HasOne("Domain.Entities.Level4", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseOrderMaster", "PurchaseOrderMaster")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Item");

                    b.Navigation("PurchaseOrderMaster");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderMaster", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusinessPartner", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Status");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Entities.RecordLedger", b =>
                {
                    b.HasOne("Domain.Entities.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Level4", "Level4")
                        .WithMany()
                        .HasForeignKey("Level4_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BusinessPartner");

                    b.Navigation("Campus");

                    b.Navigation("Level4");

                    b.Navigation("Transactions");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.RequisitionLines", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RequisitionMaster", "RequisitionMaster")
                        .WithMany("RequisitionLines")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Item");

                    b.Navigation("RequisitionMaster");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Domain.Entities.RequisitionMaster", b =>
                {
                    b.HasOne("Domain.Entities.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessPartner");

                    b.Navigation("Campus");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.TransactionReconcile", b =>
                {
                    b.HasOne("Domain.Entities.RecordLedger", "DocumentLedger")
                        .WithMany()
                        .HasForeignKey("DocumentLegderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RecordLedger", "PaymentLedger")
                        .WithMany()
                        .HasForeignKey("PaymentLedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentLedger");

                    b.Navigation("PaymentLedger");
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Domain.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Domain.Entities.WorkFlowTransition", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "AllowedRole")
                        .WithMany()
                        .HasForeignKey("AllowedRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.WorkFlowStatus", "CurrentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowMaster", "WorkflowMaster")
                        .WithMany("WorkflowTransitions")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkFlowStatus", "NextStatus")
                        .WithMany()
                        .HasForeignKey("NextStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AllowedRole");

                    b.Navigation("CurrentStatus");

                    b.Navigation("NextStatus");

                    b.Navigation("WorkflowMaster");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.BankStmtMaster", b =>
                {
                    b.Navigation("BankStmtLines");
                });

            modelBuilder.Entity("Domain.Entities.BillMaster", b =>
                {
                    b.Navigation("BillLines");
                });

            modelBuilder.Entity("Domain.Entities.BudgetMaster", b =>
                {
                    b.Navigation("BudgetLines");
                });

            modelBuilder.Entity("Domain.Entities.CreditNoteMaster", b =>
                {
                    b.Navigation("CreditNoteLines");
                });

            modelBuilder.Entity("Domain.Entities.DebitNoteMaster", b =>
                {
                    b.Navigation("DebitNoteLines");
                });

            modelBuilder.Entity("Domain.Entities.EstimatedBudgetMaster", b =>
                {
                    b.Navigation("EstimatedBudgetLines");
                });

            modelBuilder.Entity("Domain.Entities.GRNMaster", b =>
                {
                    b.Navigation("GRNLines");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceMaster", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("Domain.Entities.JournalEntryMaster", b =>
                {
                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("Domain.Entities.Level1", b =>
                {
                    b.Navigation("Level2");
                });

            modelBuilder.Entity("Domain.Entities.Level2", b =>
                {
                    b.Navigation("Level3");
                });

            modelBuilder.Entity("Domain.Entities.Level3", b =>
                {
                    b.Navigation("Level4");
                });

            modelBuilder.Entity("Domain.Entities.PayrollTransactionMaster", b =>
                {
                    b.Navigation("PayrollTransactionLines");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderMaster", b =>
                {
                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Domain.Entities.RequisitionMaster", b =>
                {
                    b.Navigation("RequisitionLines");
                });

            modelBuilder.Entity("Domain.Entities.WorkFlowMaster", b =>
                {
                    b.Navigation("WorkflowTransitions");
                });
#pragma warning restore 612, 618
        }
    }
}
